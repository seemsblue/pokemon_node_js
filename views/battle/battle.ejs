<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= session.code%>번 방</title>
    <link href="/css/battle.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>
    <header>
        <h1><%= session.title%></h1>
        <span><%= session.code%></span>
        <div class="row" style="height: 100px;">
            <div id="me" class="col-6 left">
                <div class="row" >
                </div>
            </div>
            <div id="op" class="col-6 right">
                <div class="row">
                    <h1>상대 기다리는중...</h1>
                </div>
            </div>
        </div>
        <div id="timer">
            <span>5</span>
        </div>
        <button id="askStartBtn" class="btn btn-warning">시작하기</button>
    </header>

    <div class="row" id="game-screen" style="height: 900px; width:100%">

        <div class="col-6 me" id="me" style="height: 70%; position:relative;">
            <div class="battle-pokemon bot">내포켓몬 예시위치
                <div class="battle-pokemon-info">
                    <div class="name"></div>
                    <div class="hp-container">
                        <div class="hp"></div>
                        <div class="hp-text"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-6 op" id="op" style="height: 70%; position:relative;">
            <div class="battle-pokemon top">상대포켓몬 예시위치
                <div class="battle-pokemon-info">
                    <div class="name"></div>
                    <div class="hp-container">
                        <div class="hp"></div>
                        <div class="hp-text"></div>
                    </div>
                </div>
            </div>
        </div>

        <div id="message-container"></div>
        <div class="row hidden" id="action-btn-container">
            <button class="col-6 action-btn" data-action="typeAttack1">타입공격1</button>
            <button class="col-6 action-btn" data-action="typeAttack2">타입공격2</button>
            <button class="col-6 action-btn" data-action="normalAttack">일반공격</button>
            <button class="col-6 action-btn" data-action="change">교체</button>
        </div>
    </div>

    <div class="chat">
        <div class="msg-box" style="overflow:scroll; height:200px;">
        </div>
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="도발하기" aria-label="Recipient's username" aria-describedby="button-addon2" minlength="1" maxlength="21">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2">Button</button>
        </div>
    </div>

    
    <script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>

    <script>
        const socket = io();
        const timerSpan = document.querySelector('#timer span');
        const askStartBtn = document.getElementById('askStartBtn');
        const myGameScreen = document.querySelector('#game-screen #me');
        const opGameScreen = document.querySelector('#game-screen #op');
        const messageGameScreen = document.querySelector('#game-screen #message-container');
        const btnGameScreen = document.querySelector('#game-screen #action-btn-container');

        let countdownInterval;
        let battleCountdownInterval;
        let side;

        let myReadyFlag = false;
        let opReadyFlag = false;
        let areBothPlayersReady = () =>{ //두 플레이어 모두 대기 상태(행동 완료 상태인지 확인)
            if(opReadyFlag==true&&myReadyFlag==true){
                return true;
            }
            return false;
        } 
        let setPlayersNotReady = ()=>{
            myReadyFlag = false;
            opReadyFlag = false;
        }

        let myDeck=[];
        let opDeck=[];
        let battleDeck = [];
        let selectedPokemon = [];  //선택한 포켓몬
        let opSelectedPokemon = []  //상대가 선택한 포켓몬
        

        function clearGameScreen(){
            /*
            * game-screen 내의 내용물들을 청소
            */
            myGameScreen.innerHTML = '';
            opGameScreen.innerHTML = '';
            messageGameScreen.innerHTML = '';
            btnGameScreen.classList.add('hidden');
        }

        function printBattlePokemon(pokemon,side){
            let screen = side == 'me' ? myGameScreen : opGameScreen;
            screen.innerHTML = 
            `<div class="battle-pokemon">
                <img src="${pokemon.frontImg}">
                <div class="battle-pokemon-info">
                    <div class="name"></div>
                    <div class="hp-container">
                        <div class="hp"></div>
                        <div class="hp-text"></div>
                    </div>
                </div>
            </div>`
        }

        //액션버튼에 이벤트 추가
        document.querySelectorAll('#action-btn-container .action-btn').forEach(button => {
            button.addEventListener('click', function() {
                // div 컨테이너에 hidden 클래스를 추가
                document.getElementById('action-btn-container').classList.add('hidden');
        
                // data-action 속성에 따라 socket.emit 호출
                const action = this.getAttribute('data-action');    //버튼에 달려있는 속성 추출
                socket.emit('select-action', { action: action });
            });
        });

        /** 포케 API에서 포켓몬 호출
        */
        async function getPokemonInfoById(id){   
            //서버에서는 도감번호만 보내주고, 이 작업은 클라이언트 사이드에서 해야 할지는 고민
            //서버에서 게임을 할때마다 이미지까지 다 fetch하면 너무 오래 걸리고, 클라이언트한테 종족값까지 맡기면 위조 위험이 생기는데
            //1. 사실 해결방법은 용량이 적어서 그냥 데이터베이스에 보관하면 되는데 그럼 api 써보는 의미가 없어짐
            //2. 타협해서 포켓몬 도감번호만 서버와 유저가 공유하고, 필요한 정보는 각자 불러오는데 그러면 나중에 위조검사 확장할수는 있음
            
            // 병렬로 fetch 요청
            let [response, speciesResponse, formResponse] = await Promise.all([
                fetch(`https://pokeapi.co/api/v2/pokemon/${id}`),
                fetch(`https://pokeapi.co/api/v2/pokemon-species/${id}`),
                fetch(`https://pokeapi.co/api/v2/pokemon-form/${id}`)
            ]);
            // 각 응답을 JSON으로 변환
            let data = await response.json();
            let speciesData = await speciesResponse.json();
            let formData = await formResponse.json();
        
            let frontImg = formData.sprites.front_default;
            
            let jpSpecies = speciesData.names.find(i => i.language.name === "ja-Hrkt");
            let name = jpSpecies.name;
            try{
                let krSpecies = speciesData.names.find(i => i.language.name === "ko");
                name = krSpecies.name;
            }catch(e){
                console.log('포켓몬 한글이름 없는듯 '+e);
            }
        
            let pokemon ={};
            pokemon.name = name;    //이름(한글 우선, 없으면 일본어)
            pokemon.id = id;    //도감코드
            pokemon.types = data.types.map(typeInfo => typeInfo.type.name); //타입
            pokemon.frontImg = frontImg;
            pokemon.stats = data.stats;
            let totalStat = 0;
            data.stats.map(i=> totalStat+=i.base_stat); //기타 등등 스탯 들어가있는거
            pokemon.totalStat = totalStat;  //최종 종족값
            //console.log(pokemon);
            return pokemon;
        }

        /**
        
        */
        function makeImgTag(url,id){
            return`<div id=${id}"><img src=${url} style="height:100%"></div>`
        }

        
        const maxSelection = 2;
        let selectedCount = 0;
        /**
        * 포켓몬 선택 최대 제한을 2개로 제한하는 핸들러
        */
        function handleCheckboxChange(event) {
            if (event.target.checked) {
                selectedCount++;
                if (selectedCount > maxSelection) {
                    event.target.checked = false;
                    selectedCount--;
                    alert(`You can select up to ${maxSelection} items only.`);
                }
            } else {
                selectedCount--;
            }
        }
        /**
        * indices 안에 없는 인덱스의 list 요소는 삭제하고 재할당(선택한 포켓몬만 남김)
        */
        function filterListByIndices(list, indices) {   
            return list.filter((item, index) => indices.includes(index));
        }

        let selectedItems = [0,1];
        /**
        * 포켓몬 선택 체크박스 반영 함수
        */
        function submitSelections() {
            selectedItems = [];
            document.querySelectorAll('.selection-checkbox:checked').forEach((checkbox, index) => {
                selectedItems.push(Number(checkbox.getAttribute('data-index')));    //data-index 속성 가져오기
            });
            console.log('Selected items:', selectedItems);
            document.querySelector('#confirm-button').classList.add('hidden');
        }

        function askStartHandler() {
            socket.emit('askStart');
        } 
        
        socket.emit('ask-join','<%= JSON.stringify(session.code) %>')   //방에 들어오면 코드로 서버에 룸 접속 요청
        if('<%=side%>'=='away'){    //내 정보를 서버에 보낸다
            socket.emit('away-join',{room:'<%= JSON.stringify(session.code) %>'});
        }
        //상단 프로필 출력(홈)
        if('<%=side%>'=='home'){ //내가 홈이면
            side='home';
            document.querySelector('#me .row').innerHTML=`<div class="col-3" style="height:100px"><img src="<%= home.icon %>" alt="User Icon" style="height:100%"></div><div class="col-9"><%=home.nickname%></div>`;
            socket.emit('select-side','home');
        }
        else{
            side='away';
            document.querySelector('#op .row').innerHTML =`<div class="col-3" style="height:100px"><img src="<%= home.icon %>" alt="User Icon" style="height:100%"></div><div class="col-9"><%=home.nickname%></div>`
            socket.emit('select-side','away');
        }
        //어웨이 유저 접속 & 상단 프로필 출력(어웨이)
        socket.on('away-update',(away)=>{
            if('<%=side%>'=='away'){ //내가 어웨이면
                console.log('<%=side%>');
                document.querySelector('#me .row').innerHTML=`<div class="col-3" style="height:100px"><img src="${away.icon}" alt="User Icon" style="height:100%"></div><div class="col-9">${away.nickname}</div>`
            }
            else{   //내가 홈이면
                document.querySelector('#op .row').innerHTML=`<div class="col-3" style="height:100px"><img src="${away.icon}" alt="User Icon" style="height:100%"></div><div class="col-9">${away.nickname}</div>`
                askStartBtn.classList.remove('hidden');         //이제 home유저는 버튼을 클릭해 시작요청을 보낼 수 있음
                askStartBtn.addEventListener('click', askStartHandler);
            }
        })

        //askStart 수신(게임 시작 요청)
        socket.on('askStart',()=>{
            clearGameScreen();

            let counter = 6;
            timerSpan.textContent = counter;

            countdownInterval = setInterval(() => {
                counter -= 1;
                console.log('게임 시작까지 :'+counter);
                if (counter <= -1) {
                    clearInterval(countdownInterval);
                    socket.emit('startGame');
                    timerSpan.textContent = '게임중';
                    console.log('픽 시작...');
                } else {
                    timerSpan.textContent = counter;
                }
            }, 1000);
            
        });

        socket.on('battlePhase',()=>{
            let counter = 31;   //픽 제한시간(초)
            timerSpan.textContent = counter;

            battleCountdownInterval = setInterval(() => {
                counter -= 1;
                //console.log('픽 종료까지 :'+counter);
                if (counter <= -1) {
                    clearInterval(battleCountdownInterval);
                    socket.emit('startGame');
                    timerSpan.textContent = '게임중';
                    battleDeck = selectedItems;
                    myDeck= filterListByIndices(myDeck, battleDeck);
                    console.log(myDeck);
                    socket.emit('select-pokemon',myDeck);    //내 서버소켓에 선택한 포켓몬 리스트 전송
                    console.log('게임 시작...');
                } else {
                    timerSpan.textContent = counter;
                }
            }, 1000); 
        })

        //덱 수신 및 포켓몬 선택창 출력
        socket.on('setDeck',async(data)=>{
            console.log(data.homeDeck+'/'+data.awayDeck);
            let myCodes = [];
            let opCodes = [];

            if(side=='home'){
                myCodes = data.homeDeck;
                opCodes = data.awayDeck;
            }
            else{
                myCodes = data.awayDeck;
                opCodes = data.homeDeck;
            }
            myDeck = await Promise.all(myCodes.map(async i => {
                let pokemon = await getPokemonInfoById(i);
                return pokemon;
            }));
            
            opDeck = await Promise.all(opCodes.map(async i => {
                let pokemon = await getPokemonInfoById(i);
                return pokemon;
            }));
            console.log(myDeck);
            console.log(opDeck);

            async function renderDeck() {
                await Promise.all(myDeck.map((data, i) => {
                    document.querySelector('#game-screen #me').insertAdjacentHTML("beforeend", `
                        <div style="height:15%; display: flex; align-items: center;">
                            ${makeImgTag(data.frontImg, i)}
                            <input type="checkbox" data-index="${i}" class="selection-checkbox" onchange="handleCheckboxChange(event)">
                        </div>
                    `);
                }));
                document.querySelector('#game-screen #me').insertAdjacentHTML("beforeend", `
                    <button id="confirm-button" onclick="submitSelections()">Submit</button>
                `);
            }
            renderDeck();
            await Promise.all(opDeck.map((data,i)=>{
                document.querySelector('#game-screen #op').insertAdjacentHTML("beforeend",`<div style="height:15%">${makeImgTag(data.frontImg,i)}</div>`);
            }))
        })

        socket.on('select-pokemon',(data)=>{
            if(data.side == side){
                selectedPokemon = data.pokemon;
                myReadyFlag = true;
            }
            else{
                opSelectedPokemon = data.pokemon;
                opReadyFlag = true;
            }
            
            if(areBothPlayersReady()==true){    //두명 다 선택을 마치고 기다리고 있는 상태라면 배틀 페이즈 시작 요청
                socket.emit('opSelect',{opPokemon:opSelectedPokemon});
                setPlayersNotReady();
                console.log(selectedPokemon+'/'+opSelectedPokemon);
                clearGameScreen();
                messageGameScreen.textContent = '게임 시작중...'
                printBattlePokemon(selectedPokemon[0],'me');
                printBattlePokemon(opSelectedPokemon[0],'op');
                document.querySelector('.me .name').textContent = selectedPokemon[0].name;  //배틀 선봉 초기값 설정
                document.querySelector('.op .name').textContent = opSelectedPokemon[0].name;
                document.querySelector('.me .hp-text').textContent = selectedPokemon[0].stats[0].base_stat;
                document.querySelector('.op .hp-text').textContent = opSelectedPokemon[0].stats[0].base_stat;

                socket.emit('start-turn');
            }
        })

        //턴 행동 선택 페이즈
        socket.on('start-turn',()=>{
            document.querySelector('#action-btn-container').classList.remove('hidden'); //행동 선택창 활성화
            //기타 등등 버튼에 emit 이벤트 추가
        })


        //채팅 구현
        document.querySelector('.chat div button').addEventListener('click',(e)=>{  
            let msg = document.querySelector('.chat div input').value;
            socket.emit('chat',{msg:msg,room:'<%= JSON.stringify(session.code) %>',side:'<%=side%>'})    //해당 방 룸의 코드로 chat 요청을 보낸다
            document.querySelector('.chat div input').value='';
        })
        socket.on('chat-cast',(data)=>{
            if(data.side=='<%=side%>'){ //내 side와 메시지의 side가 같다면 왼쪽정렬
                document.querySelector('.msg-box').insertAdjacentHTML('beforeend', `<div class="chat-box"><span>${data.msg}</span></div>`)
            }
            else{
                document.querySelector('.msg-box').insertAdjacentHTML('beforeend', `<div class="chat-box text-end"><span>${data.msg}</span></div>`) 
            }
        })
        
        //상대로부터 결과 통보받았을 때
        socket.on('endGame',(data)=>{
            alert(data.msg);
            socket.emit('endGame',{result:data.result});
        })

        //시작 전에 상대 나갔을 때
        socket.on('leave', () => {
            console.log('leave수신');   //상대가 떠나니까 엄청 많이 수신됨 원인이 뭘까
            socket.emit('leave');
            clearInterval(countdownInterval);
            timerSpan.textContent = '';
            if(side=='home'){   //홈일때(방 유지됨)
                askStartBtn.classList.add('hidden'); //시작버튼 비활성화
                askStartBtn.removeEventListener('click', askStartHandler);
            }
            else{   //어웨이일때(방 터짐)
                window.location.href = '/match';
            }
        });
    </script>
</body>
</html>